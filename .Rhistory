install.packages("moments")
help("summary")
summary(final_ped$UPCR,by="PAT_Cohort")
summary(final_ped$UPCR[final_ped$PAT_Cohort=="1 - MN"])
summary(final_ped$UPCR[final_ped$PAT_Cohort=="2 - MCD"])
summary(final_ped$UPCR[final_ped$PAT_Cohort=="4 - FSGS"])
summary(final_ped$UPCR[final_ped$PAT_Cohort=="5 - IgA"])
chisq.test(x=final_ped$UPCR,y=final_ped$PAT_Cohort)
chisq.test(x=final_ped$UPCR,y=final_ped$PAT_Cohort,exact=TRUE)
library(readxl)
library(metabolomics)
library(pca3d)
library(pcaMethods)
library(ggplot2)
library(rgl)
library(stringr)
# problem reading in data...variables are factors
# read and transpose data
mydata <- read_excel(path="H:\\Endocrinology\\Green\\Metabolomics papers\\Diet and exercise\\Data\\raw data for metaboanalyst no null.xlsx"
,sheet=1 )
mydata <- as.data.frame(mydata)
mydata <- mydata[!is.na(mydata$Name),]
alldata <- as.data.frame(t(mydata[,-1]))
colnames(alldata) <- mydata$Name
# create variable for ID
for (i in 1:nrow(alldata)) {
alldata$longid[i] <- row.names(alldata)[i]
}
alldata$longid <- gsub("\\s", "", alldata$longid)
alldata$id <- gsub("OGTT0", "", alldata$longid)
alldata$id <- gsub("BCTP0", "", alldata$id)
md<-prep(log(alldata[,-(1:2)]),scale="uv",center=T)
help("as.data.frame")
View(alldata)
num <- alldata[,-c(1:2)]
View(num)
newnum <- fread(num,colClasses = "numeric")
newnum <- fread("num",colClasses = "numeric")
fwrite(num,"C:\Temp")
fwrite(num,"C:\\Temp")
fwrite(num,"C:\\Temp")
fwrite(num,"C:\\Temp")
help(fwrite)
fwrite(num,"C:\\Temp\temp.csv")
fwrite(num,"C:\\Temp\\temp.csv")
newnum <- fread("C:\\Temp\\temp.csv",colClasses = "numeric")
View(newnum)
temp <- as.data.frame(t(mydata[,-1]))
colnames(temp) <- mydata$Name
# convert to numeric
num <- temp[,-c(1:2)]
fwrite(num,"C:\\Temp\\temp.csv")
newnum <- fread("C:\\Temp\\temp.csv",colClasses = "numeric")
alldata <- newnum
alldata$Batch <- temp$Batch
alldata$Batch
alldata <- as.data.frame(t(mydata[,-1]))
colnames(alldata) <- mydata$Name
# convert to numeric
num <- alldata[,-c(1:2)]
fwrite(num,"C:\\Temp\\temp.csv")
newnum <- fread("C:\\Temp\\temp.csv",colClasses = "numeric")
alldata <- alldata[,c(1:2)]
num <- alldata[,-c(1)]
fwrite(num,"C:\\Temp\\temp.csv")
fwrite(num,"C:\\Temp\\temp.csv")
alldata <- as.data.frame(t(mydata[,-1]))
colnames(alldata) <- mydata$Name
# convert to numeric
num <- alldata[,-c(1)]
fwrite(num,"C:\\Temp\\temp.csv")
newnum <- fread("C:\\Temp\\temp.csv",colClasses = "numeric")
alldata <- alldata[,c(1)]
View(mydata)
alldata <- as.data.frame(t(mydata[,-1]))
View(alldata)
colnames(alldata) <- mydata$Name
alldata <- alldata[,1]
alldata <- alldata[,c(1:2)]
alldata <- as.data.frame(t(mydata[,-1]))
colnames(alldata) <- mydata$Name
alldata <- alldata[,c(1:2)]
View(alldata)
alldata <- alldata[,1]
head(alldata)
alldata <- cbind(alldata,newnum)
class(alldata)
mydata <- read_excel(path="H:\\Endocrinology\\Green\\Metabolomics papers\\Diet and exercise\\Data\\raw data for metaboanalyst no null.xlsx"
,sheet=1 )
mydata <- as.data.frame(mydata)
mydata <- mydata[!is.na(mydata$Name),]
alldata <- as.data.frame(t(mydata[,-1]))
colnames(alldata) <- mydata$Name
# create variable for ID
for (i in 1:nrow(alldata)) {
alldata$longid[i] <- row.names(alldata)[i]
}
alldata$longid <- gsub("\\s", "", alldata$longid)
alldata$id <- gsub("OGTT0", "", alldata$longid)
alldata$id <- gsub("BCTP0", "", alldata$id)
View(alldata)
View(alldata[c("Batch","id")])
num <- alldata[,-c("Batch","id")]
num <- alldata[-c("Batch","id")]
num <- alldata[ ,!(colnames(alldata) %in% c("Batch, "id"))]
num <- alldata[-c("Batch","id")]
fwrite(num,"C:\\Temp\\temp.csv")
newnum <- fread("C:\\Temp\\temp.csv",colClasses = "numeric")
alldata <- alldata[,1]
alldata <- cbind(alldata,newnum)
# prep the data # data pre-treatement autoscale
md<-prep(log(alldata[,-(1:2)]),scale="uv",center=T)
# prcomp function for principal components
probject<-prcomp(md)
# creating a variable with factor to color data
Col<-as.factor(mydata1[,1])
# plot 3 dimensional  plot using first 3 component
plot3d(probject$x[,1:3],col=c('red', 'blue', 'green','yellow','black')[as.numeric(Col)],type="s",axes=T,size=1)
#create a legend
legend3d("topright", legend = unique(Col), pch = 16, col =c('red', 'blue', 'green','yellow','black')[as.numeric(unique(Col))] ,pt.cex=.9,cex=.7 , inset=c(0.0002))
num <- alldata[ ,!(colnames(alldata) %in% c("Batch, "id"))]
num <- alldata[-c("Batch","id")]
fwrite(num,"C:\\Temp\\temp.csv")
newnum <- fread("C:\\Temp\\temp.csv",colClasses = "numeric")
alldata <- alldata[,1]
alldata <- cbind(alldata,newnum)
# prep the data # data pre-treatement autoscale
md<-prep(log(alldata[,-(1:2)]),scale="uv",center=T)
# prcomp function for principal components
probject<-prcomp(md)
# creating a variable with factor to color data
Col<-as.factor(mydata1[,1])
# plot 3 dimensional  plot using first 3 component
plot3d(probject$x[,1:3],col=c('red', 'blue', 'green','yellow','black')[as.numeric(Col)],type="s",axes=T,size=1)
#create a legend
legend3d("topright", legend = unique(Col), pch = 16, col =c('red', 'blue', 'green','yellow','black')[as.numeric(unique(Col))] ,pt.cex=.9,cex=.7 , inset=c(0.0002))
num <- alldata[ ,!(colnames(alldata) %in% c("Batch","id"))]
alldata <- as.data.frame(t(mydata[,-1]))
colnames(alldata) <- mydata$Name
# create variable for ID
for (i in 1:nrow(alldata)) {
alldata$longid[i] <- row.names(alldata)[i]
}
alldata$longid <- gsub("\\s", "", alldata$longid)
alldata$id <- gsub("OGTT0", "", alldata$longid)
alldata$id <- gsub("BCTP0", "", alldata$id)
# convert to numeric
num <- alldata[ ,!(colnames(alldata) %in% c("Batch","id"))]
num <- alldata[-c("Batch","id")]
View(num)
alldata <- as.data.frame(t(mydata[,-1]))
colnames(alldata) <- mydata$Name
# create variable for ID
for (i in 1:nrow(alldata)) {
alldata$longid[i] <- row.names(alldata)[i]
}
alldata$longid <- gsub("\\s", "", alldata$longid)
alldata$id <- gsub("OGTT0", "", alldata$longid)
alldata$id <- gsub("BCTP0", "", alldata$id)
# convert to numeric
num <- alldata[ ,!(colnames(alldata) %in% c("Batch","id"))]
fwrite(num,"C:\\Temp\\temp.csv")
newnum <- fread("C:\\Temp\\temp.csv",colClasses = "numeric")
alldata <- alldata[ ,(colnames(alldata) %in% c("Batch","id"))]
alldata <- cbind(alldata,newnum)
md<-prep(log(alldata[,-(1:2)]),scale="uv",center=T)
md<-prep(log(alldata[,-(colnames(alldata) %in% c("Batch","id","longid"))]),scale="uv",center=T)
md<-prep(log(newnum),scale="uv",center=T)
View(newnum)
newnum$longid
alldata <- as.data.frame(t(mydata[,-1]))
colnames(alldata) <- mydata$Name
# create variable for ID
for (i in 1:nrow(alldata)) {
alldata$longid[i] <- row.names(alldata)[i]
}
alldata$longid <- gsub("\\s", "", alldata$longid)
alldata$id <- gsub("OGTT0", "", alldata$longid)
alldata$id <- gsub("BCTP0", "", alldata$id)
# convert to numeric
num <- alldata[ ,!(colnames(alldata) %in% c("Batch","id","longid"))]
fwrite(num,"C:\\Temp\\temp.csv")
newnum <- fread("C:\\Temp\\temp.csv",colClasses = "numeric")
alldata <- alldata[ ,(colnames(alldata) %in% c("Batch","id"))]
alldata <- cbind(alldata,newnum)
md<-prep(log(newnum),scale="uv",center=T)
help("prep")
md<-prep(log(newnum),scale="UV",center=T)
md<-prep(log(newnum),scale="uv",center=T)
md<-prep(log(newnum),scale="uv",center=T,eps=0.0000000001)
apply(alldata,2,function(x) length(which(!is.na(x))))
min(apply(alldata,2,function(x) length(which(!is.na(x)))))
check <- apply(alldata,2,function(x) length(which(!is.na(x))))
check <- as.data.frame(apply(alldata,2,function(x) length(which(!is.na(x)))))
View(check)
bad <- check[check[,1]<3]
bad <- check[check[,1]<3,]
bad <- as.data.frame(check[check[,1]<3,])
View(bad)
check <- as.data.frame(apply(alldata,2,function(x) length(which(!is.na(x)))))
for (i in 1:nrow(check)) {
check$id[i] <- row.names(check)[i]
}
bad <- as.data.frame(check[check[,1]<3,])
gooddata <- alldata[ ,!(colnames(alldata) %in% bad$id)]
View(check)
View(gooddata)
md<-prep(log(gooddata[,1c(1:2)]),scale="uv",center=T)
md<-prep(log(gooddata[,-c(1:2)]),scale="uv",center=T)
probject<-prcomp(md)
View(md)
help("prcomp")
probject<-prcomp(md,na.action=na.omit())
probject<-prcomp(md,na.omit=TRUE)
probject<-prcomp(md,na.option="na.pass")
probject<-prcomp(md,na.action="na.pass")
na.pass(md)
options(na.action = "pass")
probject<-prcomp(md)
View(md)
options()
md<-prep(log(na.omit(gooddata[,-c(1:2)]),scale="uv",center=T)
# prcomp function for principal components
probject<-prcomp(md)
# creating a variable with factor to color data
Col<-as.factor(mydata1[,1])
# plot 3 dimensional  plot using first 3 component
plot3d(probject$x[,1:3],col=c('red', 'blue', 'green','yellow','black')[as.numeric(Col)],type="s",axes=T,size=1)
#create a legend
legend3d("topright", legend = unique(Col), pch = 16, col =c('red', 'blue', 'green','yellow','black')[as.numeric(unique(Col))] ,pt.cex=.9,cex=.7 , inset=c(0.0002))
md<-prep(log(na.omit(gooddata[,-c(1:2)])),scale="uv",center=T)
probject<-prcomp(na.omit(md))
md<-prep(log(gooddata[,-c(1:2)]),scale="uv",center=T)
probject<-prcomp(na.omit(md))
sum(is.na(gooddata))
sum(is.na(md))
probject<-prcomp(~.,data=md,na.action=na.omit,scale=TRUE)
probject<-prcomp(~.,data=as.data.frame(md),na.action=na.omit,scale=TRUE)
md <- as.data.frame(md)
probject<-prcomp(~.,data=md,na.action=na.omit,scale=TRUE)
probject<-prcomp(~.,data=md,na.action=na.pass,scale=TRUE)
help(prcomp)
probject <- nipalsPca(md)
md<-prep(log(gooddata[,-c(1:2)]),scale="uv",center=T)
probject <- nipalsPca(md)
summary(probject)
probject <- nipalsPca(md,nPcs=3)
summary(probject)
summary(probject)
names(probject)
probject <- pca(md,method=nipalsPca(),nPcs = 3)
probject <- pca(md,method=nipalsPca,nPcs = 3)
probject <- pca(md,method="nipalsPca",nPcs = 3)
probject <- pca(md,method="nipals",nPcs = 3)
names(probject)
checkData(gooddata)
a <- checkData(gooddata)
a <- checkData(as.matrix(gooddata))
a
plotPcs(probject,pcs=1:3,type="scores")
View(gooddata)
plotPcs(probject,pcs=1:3,type="scores",col=gooddata$Batch)
sumG <- GroupSummary(gooddata)
warnings()
help(GroupSummary)
gooddata$Group <- gooddata$Batch
sumG <- GroupSummary(gooddata)
sumG
log.mean<-log(sumG$mean[4,])
help(rename)
gooddata <- alldata[ ,!(colnames(alldata) %in% bad$id)]
rename(gooddata$Batch,gooddata$Group)
rename(gooddata,c("Batch"="Group"))
rename(gooddata,replace=c("Batch"="Group"))
gooddata <- alldata[ ,!(colnames(alldata) %in% bad$id)]
rename(gooddata,replace=c("Batch"="Group"))
gooddata <- rename(gooddata,replace=c("Batch"="Group"))
gooddata <- rename(gooddata,c("Batch"="Group"))
colnames(gooddata)[colnames(gooddata)=="Batch"] <- "Group"
sumG <- GroupSummary(gooddata)
names(sumG)
names(sumG$means)
log.mean<-log(sumG$mean)
View(log.mean)
sumG <- GroupSummary(gooddata,na.action=na.omit)
probject <- pca(md,method="nipals",nPcs = 3)
plotPcs(probject,pcs=1:3,type="scores",col=gooddata$Group)
nomiss <- MissingValues(gooddata,column.cutoff = 0.95,group.cutoff = 0.7)
nomiss <- MissingValues(gooddata[,-c(1:2)],column.cutoff = 0.95,group.cutoff = 0.7)
gooddata$Group[gooddata$Group=="diet"] <- 1
gooddata <- alldata[ ,!(colnames(alldata) %in% bad$id)]
gooddata$Group[gooddata$Batch=="diet"] <- 1
gooddata$Group[gooddata$Batch=="No-diet"] <- 0
View(gooddata[c("Batch","Group")])
nomiss <- MissingValues(gooddata[,-c(1:2)],column.cutoff = 0.95,group.cutoff = 0.7)
forimput <- gooddata[,-c(1:2)]
dim(forimput)
forimput$6689
forimput[,6689]
forimput <- temp[,c(6689,1:6688)]
View(forimput)
temp[,1]
temp <- gooddata[,-c(1:2)]
forimput <- temp[,c(6689,1:6688)]
nomiss <- MissingValues(gooddata[,-c(1:2)],column.cutoff = 0.95,group.cutoff = 0.7)
sumG <- GroupSummary(nomiss)
head(nomisss)
head(nomiss)
summary(nomiss)
class(temp$Group)
table(temp$Group)
help(write.csv)
library(tidyr)
library(magrittr)
library(dplyr)
library(lubridate)
library(zoo)
library(M3)
library(data.table)
#library(Table1)
#library(devtools)
library(Hmisc)
library(knitr)
#library(kableExtra)
library(psycho)
#library(tidyverse)
source("C:\\Users\\pylell\\Documents\\GitHub\\General-code\\temp_table1.r")
####################################################################################################
#Data Manipulation #
####################################################################################################
setwd("H:\\Endocrinology\\Bjornstad\\NEPTUNE\\Data")
nameFile <- ".\\Copy of NEPTUNE SGLT Ancillary Data  Export 11MAY2018_working_locked.csv"
# read the data
#alldata <- read.csv(nameFile)
alldata <- read.csv(nameFile,na.strings = c("N",'',' ','               '))
table(alldata$SteroidsPre)
# are the primary outcomes constant within a patient?
#table(alldata$SGLTID,alldata$PAT_RemissionComp_Ever)
#table(alldata$SGLTID,alldata$PAT_RemissionPartComp_Ever)
#table(alldata$SGLTID,alldata$PAT_Composite)
# I thought this was going to be a survival analysis but it looks like outcomes are constant
# Groups of interest are PAT_Ped (<18 vs >=18), PAT_Cohort (disease group)
#table(alldata$PAT_Ped)
#table(alldata$PAT_Cohort)
# Exclude those with "other disease" except those with IgA nephropathy (PAT_IgA)
levels(alldata$PAT_Cohort)=c("1 - MN","2 - MCD","3 - Other", "4 - FSGS","5 - IgA")
alldata$PAT_Cohort[alldata$PAT_Cohort=="3 - Other" & alldata$PAT_IgA=="1: Yes"] <- "5 - IgA"
final <- alldata[alldata$PAT_Cohort != "3 - Other",]
final$PAT_Cohort <- factor(final$PAT_Cohort)
# do I need to add in the ERCB dataset for all analyses?
# no, this is a separate analysis
# are there patients in this dataset that should be excluded?
# exclude those with diabetic nephropathy?
final <- final[is.na(final$ExclusionCondSpecify),]
# Exclude anyone with diabetes at baseline or follow-up
final <- final[final$DM_FU != "1: Yes" & final$PAT_DMatBL != "1: Yes",]
# use only baseline visits.  mRNA data come from biopsy visit, but those data are included in the
# baseline record also
#final <- final[final$visitnum=='2: V02- Baseline',]
final <- filter(final,final$visitnum=='2: V02- Baseline')
# looking at race
# RaceBlack is yes for some multiracial, also all Black/African American
#table(final$PAT_Race)
#table(final$PAT_RaceBlack)
#table(final$PAT_Hispanic)
#table(final$PAT_Race,final$PAT_RaceBlack)
#table(final$PAT_Race,final$PAT_Hispanic,final$PAT_RaceBlack)
# recode race/ethnicity
# Whites
final$Race_eth[final$PAT_Race=='5: White/Caucasian'
& final$PAT_Hispanic=="2: Not Hispanic or Latino"] <- 'Non-Hispanic White'
# Asians
final$Race_eth[final$PAT_Race=='2: Asian/Asian American'
& final$PAT_Hispanic=="2: Not Hispanic or Latino"] <- 'Asian'
# Blacks
final$Race_eth[final$PAT_Race=='3: Black/African American'
& final$PAT_Hispanic=="2: Not Hispanic or Latino"] <- 'Non-Hispanic Black'
# Others
final$Race_eth[is.na(final$Race_eth)] <- "Other"
# need to check that race is correct
# table(final$Race_eth)
# View(final[c("Race_eth","PAT_Race","PAT_RaceBlack","PAT_Hispanic")])
# convert follow-up variables to yes/no
final$Stroke[!is.na(final$PAT_Stroke_FUTimeToFirst)] <- '1: Yes'
final$Stroke[is.na(final$PAT_Stroke_FUTimeToFirst)] <- '0: No'
final$HF[!is.na(final$PAT_HF_FUTimeToFirst)] <- '1: Yes'
final$HF[is.na(final$PAT_HF_FUTimeToFirst)] <- '0: No'
levels(final$SteroidsPre) <- c("1: Yes ","0: No")
final$SteroidsPre[is.na(final$SteroidsPre)] <- '0: No'
levels(final$ACEARBPre) <- c("1: Yes ","0: No")
final$ACEARBPre[is.na(final$ACEARBPre)] <- '0: No'
levels(final$CNIpre) <- c("1: Yes ","0: No")
final$CNIpre[is.na(final$CNIpre)] <- '0: No'
levels(final$CTXPre) <- c("1: Yes ","0: No")
final$CTXPre[is.na(final$CTXPre)] <- '0: No'
levels(final$MMFpre) <- c("1: Yes ","0: No")
final$MMFpre[is.na(final$MMFpre)] <- '0: No'
levels(final$ImmunosupressionV) <- c("1: Yes ","0: No")
final$ImmunosupressionV[is.na(final$ImmunosupressionV)] <- '0: No'
levels(final$SteroidV) <- c("1: Yes ","0: No")
final$SteroidV[is.na(final$SteroidV)] <- '0: No'
levels(final$CTXV) <- c("1: Yes ","0: No")
final$CTXV[is.na(final$CTXV)] <- '0: No'
levels(final$CNIV) <- c("1: Yes ","0: No")
final$CNIV[is.na(final$CNIV)] <- '0: No'
levels(final$RituxV) <- c("1: Yes ","0: No")
final$RituxV[is.na(final$RituxV)] <- '0: No'
levels(final$MMFV) <- c("1: Yes ","0: No")
final$MMFV[is.na(final$MMFV)] <- '0: No'
levels(final$OtherIStV) <- c("1: Yes ","0: No")
final$OtherIStV[is.na(final$OtherIStV)] <- '0: No'
levels(final$RAASblockV) <- c("1: Yes ","0: No")
final$RAASblockV[is.na(final$RAASblockV)] <- '0: No'
levels(final$DiureticV) <- c("1: Yes ","0: No")
final$DiureticV[is.na(final$DiureticV)] <- '0: No'
# convert to numeric
final$Weight <- as.numeric(as.character(final$Weight))
final$Height <- as.numeric(as.character(final$Height))
final$BP_SitSys <- as.numeric(as.character(final$BP_SitSys))
final$BP_SitDias <- as.numeric(as.character(final$BP_SitDias))
final$BP_StandSys <- as.numeric(as.character(final$BP_StandSys))
final$BP_StandDias <- as.numeric(as.character(final$BP_StandDias))
final$Hematocrit <- as.numeric(as.character(final$Hematocrit))
final$eGFR <- as.numeric(as.character(final$eGFR))
final$UPCR <- as.numeric(as.character(final$UPCR))
final$UACR <- as.numeric(as.character(final$UACR))
final$A1c <- as.numeric(as.character(final$A1c))
final$Sodium <- as.numeric(as.character(final$Sodium))
final$Potassium <- as.numeric(as.character(final$Potassium))
final$UreaNitrogen <- as.numeric(as.character(final$UreaNitrogen))
final$Glucose <- as.numeric(as.character(final$Glucose))
final$Albumin <- as.numeric(as.character(final$Albumin))
final$Calcium <- as.numeric(as.character(final$Calcium))
final$Phosphorus <- as.numeric(as.character(final$Phosphorus))
final$Magnesium <- as.numeric(as.character(final$Magnesium))
####################################################################################################
# Descriptive Tables #
# Table 1 - at time of biopsy #
####################################################################################################
# set factors and levels
# set labels
label(final$PAT_Ped)='Pediatric'
label(final$PAT_Cohort)='Disease group'
label(final$PAT_Agev2)='Age'
label(final$PAT_Sex)='Sex'
label(final$BMI)='BMI'
label(final$Weight)='Wt'
label(final$Height)='Height'
label(final$BP_SitSys)='Sitting SBP'
label(final$BP_SitDias)='Sitting DBP'
label(final$BP_StandSys)='Standing SBP'
label(final$BP_StandDias)='Standing DBP'
label(final$Hematocrit)='Hematocrit'
label(final$eGFR)='eGFR'
label(final$UPCR)='UPCR'
label(final$UACR)="UACR"
label(final$PAT_CADatBL)='CAD baseline'
label(final$CAD_FU)='CAD follow-up'
label(final$PAT_PVDatBL)='PVD baseline'
label(final$PVD_FU)='PVD follow-up'
label(final$PAT_StrokeatBL)='Stroke baseline'
label(final$Stroke)='Stroke follow-up'
label(final$PAT_HTNatBL)='Hypertension baseline'
label(final$HTNStatus)='Hypertension status'
label(final$PAT_DMatBL)='Diabetes baseline'
label(final$DM_FU)='Diabetes follow-up'
label(final$PAT_HFatBL)='Heart failure baseline'
label(final$HF)='Heart failure follow-up'
label(final$HA_FU)='Heart arrhythmia follow-up'
label(final$TE_FU)='Thromboembolic event follow-up'
label(final$PAT_CanceratBL)='Cancer baseline'
label(final$Cancer_FU)='Cancer follow-up'
label(final$A1c)='HbA1c (%)'
label(final$Sodium)='Sodium (mmol/L)'
label(final$Potassium)='Potassium (mmol/L)'
label(final$CO2)='CO2 (mmol/L)'
label(final$UreaNitrogen)='Urea nitrogen (mg/dl)'
label(final$Glucose)="Glucose (mg/dL)"
label(final$Albumin)="Albumin (g/dL)"
label(final$Calcium)='Calcium (mg/dL)'
label(final$Phosphorus)="Phosphorus (mg/dL)"
label(final$Magnesium)="Magnesium (mg/dL)"
label(final$SGLT1_TI)="Log2 SGLT1 TI"
label(final$SGLT1_GLOM)="Log2 SGLT1 GLOM"
label(final$SGLT2_TI)="Log2 SGLT2 TI"
label(final$SGLT2_GLOM)="Log2 SGLT2 GLOM"
label(final$interstitialfibrosis)="Interstitial fibrosis"
label(final$SteroidsPre)="Steroid exposure prior to enrollment"
label(final$ACEARBPre)="ACE/ARB exposure prior to enrollment"
label(final$CNIpre)="CNI exposure prior to enrollment"
label(final$CTXPre)="CTX exposure prior to enrollment exposure prior to enrollment"
label(final$MMFpre)="MMF exposure prior to enrollment"
label(final$ImmunosupressionV)="On immunosuppressive at V2"
label(final$SteroidV)="On steroids at V2"
label(final$CTXV)="On CTX at V2"
label(final$CNIV)="On CNI at V2"
label(final$RituxV)="On Rituxan at V2"
label(final$MMFV)="On MMF at V2"
label(final$OtherIStV)="On other immunosuppressive at V2"
label(final$RAASblockV)="On RAAS blocker at V2"
label(final$DiureticV)="On diuretic at V2"
# can't find
#label(final$Protein)
# not sure what to do about medication use
# divide into age groups
final_ped <- final[final$PAT_Ped=="1: Yes",]
final_adult <- final[final$PAT_Ped=="0: No",]
Npeds <- nrow(distinct(final_ped,SGLTID))
Nadult <- nrow(distinct(final_adult,SGLTID))
write.csv(final,file="H:\\Endocrinology\\Bjornstad\\NEPTUNE\\Data\\final_NEPTUNE_data.csv")
write.csv(final_ped,file="H:\\Endocrinology\\Bjornstad\\NEPTUNE\\Data\\final_NEPTUNE_data_peds.csv")
write.csv(final_adult,file="H:\\Endocrinology\\Bjornstad\\NEPTUNE\\Data\\final_NEPTUNE_data_adult.csv")
